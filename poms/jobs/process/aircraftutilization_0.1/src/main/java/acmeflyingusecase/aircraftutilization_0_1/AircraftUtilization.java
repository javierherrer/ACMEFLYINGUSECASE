// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package acmeflyingusecase.aircraftutilization_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: AircraftUtilization Purpose: Data flow<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class AircraftUtilization implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "AircraftUtilization";
	private final String projectName = "ACMEFLYINGUSECASE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					AircraftUtilization.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(AircraftUtilization.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public java.util.Date timeid;

		public java.util.Date getTimeid() {
			return this.timeid;
		}

		public Integer flighthours;

		public Integer getFlighthours() {
			return this.flighthours;
		}

		public Integer delayedminutes;

		public Integer getDelayedminutes() {
			return this.delayedminutes;
		}

		public Integer Cancellations;

		public Integer getCancellations() {
			return this.Cancellations;
		}

		public Integer Delays;

		public Integer getDelays() {
			return this.Delays;
		}

		public Integer FlightCycles;

		public Integer getFlightCycles() {
			return this.FlightCycles;
		}

		public Integer adoss;

		public Integer getAdoss() {
			return this.adoss;
		}

		public Integer adossu;

		public Integer getAdossu() {
			return this.adossu;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.Cancellations = readInteger(dis);

					this.Delays = readInteger(dis);

					this.FlightCycles = readInteger(dis);

					this.adoss = readInteger(dis);

					this.adossu = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.Cancellations = readInteger(dis);

					this.Delays = readInteger(dis);

					this.FlightCycles = readInteger(dis);

					this.adoss = readInteger(dis);

					this.adossu = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.Cancellations, dos);

				// Integer

				writeInteger(this.Delays, dos);

				// Integer

				writeInteger(this.FlightCycles, dos);

				// Integer

				writeInteger(this.adoss, dos);

				// Integer

				writeInteger(this.adossu, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.Cancellations, dos);

				// Integer

				writeInteger(this.Delays, dos);

				// Integer

				writeInteger(this.FlightCycles, dos);

				// Integer

				writeInteger(this.adoss, dos);

				// Integer

				writeInteger(this.adossu, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aircraftid=" + aircraftid);
			sb.append(",timeid=" + String.valueOf(timeid));
			sb.append(",flighthours=" + String.valueOf(flighthours));
			sb.append(",delayedminutes=" + String.valueOf(delayedminutes));
			sb.append(",Cancellations=" + String.valueOf(Cancellations));
			sb.append(",Delays=" + String.valueOf(Delays));
			sb.append(",FlightCycles=" + String.valueOf(FlightCycles));
			sb.append(",adoss=" + String.valueOf(adoss));
			sb.append(",adossu=" + String.valueOf(adossu));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public java.util.Date timeid;

		public java.util.Date getTimeid() {
			return this.timeid;
		}

		public Integer flighthours;

		public Integer getFlighthours() {
			return this.flighthours;
		}

		public Integer delayedminutes;

		public Integer getDelayedminutes() {
			return this.delayedminutes;
		}

		public Integer Cancellations;

		public Integer getCancellations() {
			return this.Cancellations;
		}

		public Integer Delays;

		public Integer getDelays() {
			return this.Delays;
		}

		public Integer FlightCycles;

		public Integer getFlightCycles() {
			return this.FlightCycles;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.Cancellations = readInteger(dis);

					this.Delays = readInteger(dis);

					this.FlightCycles = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.Cancellations = readInteger(dis);

					this.Delays = readInteger(dis);

					this.FlightCycles = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.Cancellations, dos);

				// Integer

				writeInteger(this.Delays, dos);

				// Integer

				writeInteger(this.FlightCycles, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.Cancellations, dos);

				// Integer

				writeInteger(this.Delays, dos);

				// Integer

				writeInteger(this.FlightCycles, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aircraftid=" + aircraftid);
			sb.append(",timeid=" + String.valueOf(timeid));
			sb.append(",flighthours=" + String.valueOf(flighthours));
			sb.append(",delayedminutes=" + String.valueOf(delayedminutes));
			sb.append(",Cancellations=" + String.valueOf(Cancellations));
			sb.append(",Delays=" + String.valueOf(Delays));
			sb.append(",FlightCycles=" + String.valueOf(FlightCycles));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public java.util.Date timeid;

		public java.util.Date getTimeid() {
			return this.timeid;
		}

		public Integer flighthours;

		public Integer getFlighthours() {
			return this.flighthours;
		}

		public Integer delayedminutes;

		public Integer getDelayedminutes() {
			return this.delayedminutes;
		}

		public Integer Cancellations;

		public Integer getCancellations() {
			return this.Cancellations;
		}

		public Integer Delays;

		public Integer getDelays() {
			return this.Delays;
		}

		public Integer FlightCycles;

		public Integer getFlightCycles() {
			return this.FlightCycles;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.Cancellations = readInteger(dis);

					this.Delays = readInteger(dis);

					this.FlightCycles = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.Cancellations = readInteger(dis);

					this.Delays = readInteger(dis);

					this.FlightCycles = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.Cancellations, dos);

				// Integer

				writeInteger(this.Delays, dos);

				// Integer

				writeInteger(this.FlightCycles, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.Cancellations, dos);

				// Integer

				writeInteger(this.Delays, dos);

				// Integer

				writeInteger(this.FlightCycles, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aircraftid=" + aircraftid);
			sb.append(",timeid=" + String.valueOf(timeid));
			sb.append(",flighthours=" + String.valueOf(flighthours));
			sb.append(",delayedminutes=" + String.valueOf(delayedminutes));
			sb.append(",Cancellations=" + String.valueOf(Cancellations));
			sb.append(",Delays=" + String.valueOf(Delays));
			sb.append(",FlightCycles=" + String.valueOf(FlightCycles));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public java.util.Date timeid;

		public java.util.Date getTimeid() {
			return this.timeid;
		}

		public Integer flighthours;

		public Integer getFlighthours() {
			return this.flighthours;
		}

		public Integer delayedminutes;

		public Integer getDelayedminutes() {
			return this.delayedminutes;
		}

		public Integer cancelled;

		public Integer getCancelled() {
			return this.cancelled;
		}

		public Integer delaycode;

		public Integer getDelaycode() {
			return this.delaycode;
		}

		public Integer not_cancelled;

		public Integer getNot_cancelled() {
			return this.not_cancelled;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.cancelled = readInteger(dis);

					this.delaycode = readInteger(dis);

					this.not_cancelled = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.cancelled = readInteger(dis);

					this.delaycode = readInteger(dis);

					this.not_cancelled = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.cancelled, dos);

				// Integer

				writeInteger(this.delaycode, dos);

				// Integer

				writeInteger(this.not_cancelled, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.cancelled, dos);

				// Integer

				writeInteger(this.delaycode, dos);

				// Integer

				writeInteger(this.not_cancelled, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aircraftid=" + aircraftid);
			sb.append(",timeid=" + String.valueOf(timeid));
			sb.append(",flighthours=" + String.valueOf(flighthours));
			sb.append(",delayedminutes=" + String.valueOf(delayedminutes));
			sb.append(",cancelled=" + String.valueOf(cancelled));
			sb.append(",delaycode=" + String.valueOf(delaycode));
			sb.append(",not_cancelled=" + String.valueOf(not_cancelled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public java.util.Date timeid;

		public java.util.Date getTimeid() {
			return this.timeid;
		}

		public Integer flighthours;

		public Integer getFlighthours() {
			return this.flighthours;
		}

		public Integer delayedminutes;

		public Integer getDelayedminutes() {
			return this.delayedminutes;
		}

		public Integer cancelled;

		public Integer getCancelled() {
			return this.cancelled;
		}

		public Integer delaycode;

		public Integer getDelaycode() {
			return this.delaycode;
		}

		public Integer not_cancelled;

		public Integer getNot_cancelled() {
			return this.not_cancelled;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.cancelled = readInteger(dis);

					this.delaycode = readInteger(dis);

					this.not_cancelled = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.timeid = readDate(dis);

					this.flighthours = readInteger(dis);

					this.delayedminutes = readInteger(dis);

					this.cancelled = readInteger(dis);

					this.delaycode = readInteger(dis);

					this.not_cancelled = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.cancelled, dos);

				// Integer

				writeInteger(this.delaycode, dos);

				// Integer

				writeInteger(this.not_cancelled, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.timeid, dos);

				// Integer

				writeInteger(this.flighthours, dos);

				// Integer

				writeInteger(this.delayedminutes, dos);

				// Integer

				writeInteger(this.cancelled, dos);

				// Integer

				writeInteger(this.delaycode, dos);

				// Integer

				writeInteger(this.not_cancelled, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aircraftid=" + aircraftid);
			sb.append(",timeid=" + String.valueOf(timeid));
			sb.append(",flighthours=" + String.valueOf(flighthours));
			sb.append(",delayedminutes=" + String.valueOf(delayedminutes));
			sb.append(",cancelled=" + String.valueOf(cancelled));
			sb.append(",delaycode=" + String.valueOf(delaycode));
			sb.append(",not_cancelled=" + String.valueOf(not_cancelled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row8Struct row8 = new row8Struct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String aircraftid;
					java.util.Date timeid;
					Integer Cancellations_sum;
					Integer Delays_sum;
					int count = 0;
					int FlightCycles_clmCount = 0;

					Integer flighthours_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());

							result = prime * result + ((this.timeid == null) ? 0 : this.timeid.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.aircraftid == null) {
							if (other.aircraftid != null)
								return false;
						} else if (!this.aircraftid.equals(other.aircraftid))
							return false;

						if (this.timeid == null) {
							if (other.timeid != null)
								return false;
						} else if (!this.timeid.equals(other.timeid))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "max.tico";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:MOVv1CkCSsO/PyrYojZCfvroWMIeRxv6MNb8tB86EU4XJ76d");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AIMS";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select \naircraftregistration as aircraftid, \nscheduleddeparture::date as timeid,\n(extract(epoch from (actualarrival - a"
						+ "ctualdeparture)) / 3600)::int as flightHours,\n(extract(epoch from (actualdeparture- scheduleddeparture)) / 60)::int as D"
						+ "elayedminutes,\nCASE WHEN cancelled THEN 1 ELSE 0 END as cancelled,\nCASE WHEN delaycode IS NULL THEN 0 ELSE 1 END as dela"
						+ "ycode,\nCASE WHEN cancelled THEN 0 ELSE 1 END as not_cancelled\nfrom Flights\nwhere Flights.departureAirport = SUBSTRING(fl"
						+ "ightid FROM 8 FOR 3)\n    AND Flights.arrivalAirport = SUBSTRING(flightid FROM 12 FOR 3)\n	AND (extract(epoch from (actual"
						+ "arrival - actualdeparture)) / 3600)::int  <=24\n	AND actualarrival > actualdeparture\n	AND scheduledarrival > scheduleddep"
						+ "arture";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.aircraftid = null;
						} else {

							row1.aircraftid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.timeid = null;
						} else {

							row1.timeid = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 2);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.flighthours = null;
						} else {

							row1.flighthours = rs_tDBInput_1.getInt(3);
							if (rs_tDBInput_1.wasNull()) {
								row1.flighthours = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.delayedminutes = null;
						} else {

							row1.delayedminutes = rs_tDBInput_1.getInt(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.delayedminutes = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.cancelled = null;
						} else {

							row1.cancelled = rs_tDBInput_1.getInt(5);
							if (rs_tDBInput_1.wasNull()) {
								row1.cancelled = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.delaycode = null;
						} else {

							row1.delaycode = rs_tDBInput_1.getInt(6);
							if (rs_tDBInput_1.wasNull()) {
								row1.delaycode = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.not_cancelled = null;
						} else {

							row1.not_cancelled = rs_tDBInput_1.getInt(7);
							if (rs_tDBInput_1.wasNull()) {
								row1.not_cancelled = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						operation_finder_tAggregateRow_2.aircraftid = row1.aircraftid;
						operation_finder_tAggregateRow_2.timeid = row1.timeid;

						operation_finder_tAggregateRow_2.hashCodeDirty = true;

						operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

						if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

							operation_result_tAggregateRow_2.aircraftid = operation_finder_tAggregateRow_2.aircraftid;
							operation_result_tAggregateRow_2.timeid = operation_finder_tAggregateRow_2.timeid;

							hash_tAggregateRow_2.put(operation_result_tAggregateRow_2,
									operation_result_tAggregateRow_2);

						} // G_OutMain_AggR_001

						if (operation_result_tAggregateRow_2.Cancellations_sum == null) {
							operation_result_tAggregateRow_2.Cancellations_sum = (int) 0;
						}

						if (row1.cancelled != null)
							operation_result_tAggregateRow_2.Cancellations_sum += row1.cancelled;
						if (operation_result_tAggregateRow_2.Delays_sum == null) {
							operation_result_tAggregateRow_2.Delays_sum = (int) 0;
						}

						if (row1.delaycode != null)
							operation_result_tAggregateRow_2.Delays_sum += row1.delaycode;
						operation_result_tAggregateRow_2.FlightCycles_clmCount++;
						operation_result_tAggregateRow_2.count++;

						if (operation_result_tAggregateRow_2.flighthours_sum == null) {
							operation_result_tAggregateRow_2.flighthours_sum = (int) 0;
						}

						if (row1.flighthours != null)
							operation_result_tAggregateRow_2.flighthours_sum += row1.flighthours;

						tos_count_tAggregateRow_2_AGGOUT++;

						/**
						 * [tAggregateRow_2_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						/**
						 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						/**
						 * [tAggregateRow_2_AGGOUT process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tDBOutput_2 = 0;

				int updateKeyCount_tDBOutput_2 = 2;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_2 == 9 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int tmp_batchUpdateCount_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;

				// optional table
				String dbschema_tDBOutput_2 = null;
				String tableName_tDBOutput_2 = null;
				String driverClass_tDBOutput_2 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_2);
				String url_tDBOutput_2 = null;
				url_tDBOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "oraclefib.fib.upc.edu" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "orabd"
						+ ")))";
				String dbUser_tDBOutput_2 = "javier.herrer.torres";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:yOp4TyiScINy5Lpc+XSNsR+cfnm9vBAdNGHhgObHgXvWQ++j");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				dbschema_tDBOutput_2 = "\"JAVIER.HERRER.TORRES\"";

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);
				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;
				int count_tDBOutput_2 = 0;

				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("Aircraft_utilization");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "." + ("Aircraft_utilization");
				}
				try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtDrop_tDBOutput_2.execute("DROP TABLE " + tableName_tDBOutput_2 + "");
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE " + tableName_tDBOutput_2
							+ "(aircraftid CHAR(6)   not null ,timeid DATE ,flighthours NUMBER(2,0)  ,delayedminutes NUMBER(3,0)  ,Cancellations NUMBER(2,0)  ,Delays NUMBER(2,0)  ,FlightCycles NUMBER(2,0)  ,adoss NUMBER(2,0)  ,adossu NUMBER(2,0)  ,primary key(aircraftid,timeid))");
				}
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(
						"SELECT COUNT(1) FROM " + tableName_tDBOutput_2 + " WHERE trim(aircraftid) = ? AND timeid = ?");
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO " + tableName_tDBOutput_2
						+ " (aircraftid,timeid,flighthours,delayedminutes,Cancellations,Delays,FlightCycles,adoss,adossu) VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
				String update_tDBOutput_2 = "UPDATE " + tableName_tDBOutput_2
						+ " SET flighthours = ?,delayedminutes = ?,Cancellations = ?,Delays = ?,FlightCycles = ?,adoss = ?,adossu = ? WHERE trim(aircraftid) = ? AND timeid = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tJoin_3 begin ] start
				 */

				ok_Hash.put("tJoin_3", false);
				start_Hash.put("tJoin_3", System.currentTimeMillis());

				currentComponent = "tJoin_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tJoin_3 = 0;

				final java.util.Map<row6Struct, row6Struct> tHash_tJoin_3 = (java.util.Map<row6Struct, row6Struct>) globalMap
						.get("tHash_row6");

				class Util_tJoin_3 {
					row6Struct lookupValue = null;
					row6Struct row6HashKey = new row6Struct();

					public boolean isJoined(row8Struct mainRow) {
						row6HashKey.aircraftid = mainRow.aircraftid;

						row6HashKey.scheduleddeparture = mainRow.timeid;

						row6HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_3.get(row6HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_3 util_tJoin_3 = new Util_tJoin_3();

				int nb_line_tJoin_3 = 0;

				/**
				 * [tJoin_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row8.aircraftid = aggregated_row_tAggregateRow_2.aircraftid;

					row8.timeid = aggregated_row_tAggregateRow_2.timeid;
					row8.flighthours = aggregated_row_tAggregateRow_2.flighthours_sum;
					row8.Cancellations = aggregated_row_tAggregateRow_2.Cancellations_sum;
					row8.Delays = aggregated_row_tAggregateRow_2.Delays_sum;
					row8.FlightCycles = (int) aggregated_row_tAggregateRow_2.count;
					row8.FlightCycles = (int) aggregated_row_tAggregateRow_2.FlightCycles_clmCount;

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tJoin_3 main ] start
					 */

					currentComponent = "tJoin_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row8"

						);
					}

					row9 = null;

					row9 = new row9Struct();
					row9.aircraftid = row8.aircraftid;
					row9.timeid = row8.timeid;
					row9.flighthours = row8.flighthours;
					row9.delayedminutes = row8.delayedminutes;
					row9.Cancellations = row8.Cancellations;
					row9.Delays = row8.Delays;
					row9.FlightCycles = row8.FlightCycles;

					if (util_tJoin_3.isJoined(row8)) {
						row9.adoss = util_tJoin_3.lookupValue.adoss;
						row9.adossu = util_tJoin_3.lookupValue.adossu;
					}

///////////////////////    			

					tos_count_tJoin_3++;

					/**
					 * [tJoin_3 main ] stop
					 */

					/**
					 * [tJoin_3 process_data_begin ] start
					 */

					currentComponent = "tJoin_3";

					/**
					 * [tJoin_3 process_data_begin ] stop
					 */
// Start of branch "row9"
					if (row9 != null) {

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row9"

							);
						}

						whetherReject_tDBOutput_2 = false;
						if (row9.aircraftid == null) {
							pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
						} else {
							if (row9.aircraftid == null) {
								pstmt_tDBOutput_2.setNull(1, java.sql.Types.CHAR);
							} else if (row9.aircraftid == " ") {
								pstmt_tDBOutput_2.setString(1, "");
							} else {
								pstmt_tDBOutput_2.setString(1, String.valueOf(row9.aircraftid));
							}
						}

						if (row9.timeid != null) {
							pstmt_tDBOutput_2.setObject(2, new java.sql.Timestamp(row9.timeid.getTime()),
									java.sql.Types.DATE);
						} else {
							pstmt_tDBOutput_2.setNull(2, java.sql.Types.DATE);
						}

						int checkCount_tDBOutput_2 = -1;
						try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
							while (rs_tDBOutput_2.next()) {
								checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
							}
						}
						if (checkCount_tDBOutput_2 > 0) {
							if (row9.flighthours == null) {
								pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_2.setInt(1, row9.flighthours);
							}

							if (row9.delayedminutes == null) {
								pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_2.setInt(2, row9.delayedminutes);
							}

							if (row9.Cancellations == null) {
								pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_2.setInt(3, row9.Cancellations);
							}

							if (row9.Delays == null) {
								pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_2.setInt(4, row9.Delays);
							}

							if (row9.FlightCycles == null) {
								pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_2.setInt(5, row9.FlightCycles);
							}

							if (row9.adoss == null) {
								pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_2.setInt(6, row9.adoss);
							}

							if (row9.adossu == null) {
								pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_2.setInt(7, row9.adossu);
							}

							if (row9.aircraftid == null) {
								pstmtUpdate_tDBOutput_2.setNull(8 + count_tDBOutput_2, java.sql.Types.VARCHAR);
							} else {
								if (row9.aircraftid == null) {
									pstmtUpdate_tDBOutput_2.setNull(8 + count_tDBOutput_2, java.sql.Types.CHAR);
								} else if (row9.aircraftid == " ") {
									pstmtUpdate_tDBOutput_2.setString(8 + count_tDBOutput_2, "");
								} else {
									pstmtUpdate_tDBOutput_2.setString(8 + count_tDBOutput_2,
											String.valueOf(row9.aircraftid));
								}
							}

							if (row9.timeid != null) {
								pstmtUpdate_tDBOutput_2.setObject(9 + count_tDBOutput_2,
										new java.sql.Timestamp(row9.timeid.getTime()), java.sql.Types.DATE);
							} else {
								pstmtUpdate_tDBOutput_2.setNull(9 + count_tDBOutput_2, java.sql.Types.DATE);
							}

							try {
								int processedCount_tDBOutput_2 = pstmtUpdate_tDBOutput_2.executeUpdate();
								updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
								rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
								nb_line_tDBOutput_2++;
							} catch (java.lang.Exception e_tDBOutput_2) {
								globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
								whetherReject_tDBOutput_2 = true;
								nb_line_tDBOutput_2++;
								System.err.print(e_tDBOutput_2.getMessage());
							}
						} else {
							if (row9.aircraftid == null) {
								pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
							} else {
								if (row9.aircraftid == null) {
									pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.CHAR);
								} else if (row9.aircraftid == " ") {
									pstmtInsert_tDBOutput_2.setString(1, "");
								} else {
									pstmtInsert_tDBOutput_2.setString(1, String.valueOf(row9.aircraftid));
								}
							}

							if (row9.timeid != null) {
								pstmtInsert_tDBOutput_2.setObject(2, new java.sql.Timestamp(row9.timeid.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.DATE);
							}

							if (row9.flighthours == null) {
								pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tDBOutput_2.setInt(3, row9.flighthours);
							}

							if (row9.delayedminutes == null) {
								pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tDBOutput_2.setInt(4, row9.delayedminutes);
							}

							if (row9.Cancellations == null) {
								pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tDBOutput_2.setInt(5, row9.Cancellations);
							}

							if (row9.Delays == null) {
								pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tDBOutput_2.setInt(6, row9.Delays);
							}

							if (row9.FlightCycles == null) {
								pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tDBOutput_2.setInt(7, row9.FlightCycles);
							}

							if (row9.adoss == null) {
								pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tDBOutput_2.setInt(8, row9.adoss);
							}

							if (row9.adossu == null) {
								pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tDBOutput_2.setInt(9, row9.adossu);
							}

							try {
								int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
								insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
								rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
								nb_line_tDBOutput_2++;
							} catch (java.lang.Exception e_tDBOutput_2) {
								globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
								whetherReject_tDBOutput_2 = true;
								nb_line_tDBOutput_2++;
								System.err.print(e_tDBOutput_2.getMessage());
							}
						}
						commitCounter_tDBOutput_2++;
						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
							if (rowsToCommitCount_tDBOutput_2 != 0) {

							}
							conn_tDBOutput_2.commit();
							if (rowsToCommitCount_tDBOutput_2 != 0) {

								rowsToCommitCount_tDBOutput_2 = 0;
							}
							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

					} // End of branch "row9"

					/**
					 * [tJoin_3 process_data_end ] start
					 */

					currentComponent = "tJoin_3";

					/**
					 * [tJoin_3 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tJoin_3 end ] start
				 */

				currentComponent = "tJoin_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tJoin_3", true);
				end_Hash.put("tJoin_3", System.currentTimeMillis());

				/**
				 * [tJoin_3 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtUpdate_tDBOutput_2 != null) {
					pstmtUpdate_tDBOutput_2.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_2");
				}
				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {

				}
				conn_tDBOutput_2.commit();
				if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {

					rowsToCommitCount_tDBOutput_2 = 0;
				}
				commitCounter_tDBOutput_2 = 0;

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tJoin_3"
			globalMap.remove("tHash_row6");

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tJoin_3 finally ] start
				 */

				currentComponent = "tJoin_3";

				/**
				 * [tJoin_3 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
						if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_2")) != null) {
							pstmtUpdateToClose_tDBOutput_2.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
						if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_2")) != null) {
							pstmtInsertToClose_tDBOutput_2.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public java.util.Date scheduledarrival;

		public java.util.Date getScheduledarrival() {
			return this.scheduledarrival;
		}

		public java.util.Date scheduleddeparture;

		public java.util.Date getScheduleddeparture() {
			return this.scheduleddeparture;
		}

		public Integer adoss;

		public Integer getAdoss() {
			return this.adoss;
		}

		public Integer adossu;

		public Integer getAdossu() {
			return this.adossu;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());

				result = prime * result + ((this.scheduleddeparture == null) ? 0 : this.scheduleddeparture.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.aircraftid == null) {
				if (other.aircraftid != null)
					return false;

			} else if (!this.aircraftid.equals(other.aircraftid))

				return false;

			if (this.scheduleddeparture == null) {
				if (other.scheduleddeparture != null)
					return false;

			} else if (!this.scheduleddeparture.equals(other.scheduleddeparture))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.aircraftid = this.aircraftid;
			other.scheduledarrival = this.scheduledarrival;
			other.scheduleddeparture = this.scheduleddeparture;
			other.adoss = this.adoss;
			other.adossu = this.adossu;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.aircraftid = this.aircraftid;
			other.scheduleddeparture = this.scheduleddeparture;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_AircraftUtilization, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.scheduleddeparture = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_AircraftUtilization) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.scheduleddeparture = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.scheduleddeparture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// java.util.Date

				writeDate(this.scheduleddeparture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.scheduledarrival = readDate(dis, ois);

				this.adoss = readInteger(dis, ois);

				this.adossu = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.scheduledarrival = readDate(dis, objectIn);

				this.adoss = readInteger(dis, objectIn);

				this.adossu = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeDate(this.scheduledarrival, dos, oos);

				writeInteger(this.adoss, dos, oos);

				writeInteger(this.adossu, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeDate(this.scheduledarrival, dos, objectOut);

				writeInteger(this.adoss, dos, objectOut);

				writeInteger(this.adossu, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aircraftid=" + aircraftid);
			sb.append(",scheduledarrival=" + String.valueOf(scheduledarrival));
			sb.append(",scheduleddeparture=" + String.valueOf(scheduleddeparture));
			sb.append(",adoss=" + String.valueOf(adoss));
			sb.append(",adossu=" + String.valueOf(adossu));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.aircraftid, other.aircraftid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.scheduleddeparture, other.scheduleddeparture);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tHash_row6 begin ] start
				 */

				ok_Hash.put("tHash_row6", false);
				start_Hash.put("tHash_row6", System.currentTimeMillis());

				currentComponent = "tHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tHash_row6 = 0;

				java.util.Map<row6Struct, row6Struct> tHash_row6 = new java.util.LinkedHashMap<row6Struct, row6Struct>();
				globalMap.put("tHash_row6", tHash_row6);

				/**
				 * [tHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "max.tico";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:PTxaisT8cpP5HR/4Y1/l+US0Bwmq09Dnu1b8FQfNJd8304EC");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AIMS";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "select aircraftregistration as aircraftid,\nscheduledarrival,\nscheduleddeparture::date,\nCASE WHEN programmed THEN (extra"
						+ "ct(epoch from (scheduledarrival- scheduleddeparture)) / 86400)::int ELSE 0 END as ADOSS,\nCASE WHEN programmed THEN 0 ELS"
						+ "E (extract(epoch from (scheduledarrival- scheduleddeparture)) / 86400)::int END as ADOSSU\nfrom Maintenance\nwhere program"
						+ "med=True";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row6.aircraftid = null;
						} else {

							row6.aircraftid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row6.scheduledarrival = null;
						} else {

							row6.scheduledarrival = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 2);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row6.scheduleddeparture = null;
						} else {

							row6.scheduleddeparture = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 3);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row6.adoss = null;
						} else {

							row6.adoss = rs_tDBInput_3.getInt(4);
							if (rs_tDBInput_3.wasNull()) {
								row6.adoss = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row6.adossu = null;
						} else {

							row6.adossu = rs_tDBInput_3.getInt(5);
							if (rs_tDBInput_3.wasNull()) {
								row6.adossu = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tHash_row6 main ] start
						 */

						currentComponent = "tHash_row6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.aircraftid = row6.aircraftid;
						row6_HashRow.scheduledarrival = row6.scheduledarrival;
						row6_HashRow.scheduleddeparture = row6.scheduleddeparture;
						row6_HashRow.adoss = row6.adoss;
						row6_HashRow.adossu = row6.adossu;
						tHash_row6.put(row6_HashRow, row6_HashRow);

						tos_count_tHash_row6++;

						/**
						 * [tHash_row6 main ] stop
						 */

						/**
						 * [tHash_row6 process_data_begin ] start
						 */

						currentComponent = "tHash_row6";

						/**
						 * [tHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tHash_row6 process_data_end ] start
						 */

						currentComponent = "tHash_row6";

						/**
						 * [tHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tHash_row6 end ] start
				 */

				currentComponent = "tHash_row6";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tHash_row6", true);
				end_Hash.put("tHash_row6", System.currentTimeMillis());

				/**
				 * [tHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tHash_row6 finally ] start
				 */

				currentComponent = "tHash_row6";

				/**
				 * [tHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final AircraftUtilization AircraftUtilizationClass = new AircraftUtilization();

		int exitCode = AircraftUtilizationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = AircraftUtilization.class.getClassLoader().getResourceAsStream(
					"acmeflyingusecase/aircraftutilization_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = AircraftUtilization.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : AircraftUtilization");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 134087 characters generated by Talend Open Studio for Data Integration on the
 * December 12, 2023, 10:35:08 AM CET
 ************************************************************************************************/