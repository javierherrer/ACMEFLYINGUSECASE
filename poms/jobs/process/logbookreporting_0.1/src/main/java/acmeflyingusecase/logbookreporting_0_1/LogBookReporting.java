// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package acmeflyingusecase.logbookreporting_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: LogBookReporting Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class LogBookReporting implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

<<<<<<< HEAD
=======
	private Object[] multiThreadLockWrite = new Object[0];

>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "LogBookReporting";
	private final String projectName = "ACMEFLYINGUSECASE";
	public Integer errorCode = null;
	private String currentComponent = "";

<<<<<<< HEAD
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
=======
	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					LogBookReporting.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(LogBookReporting.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

<<<<<<< HEAD
		status = "failure";
=======
		((java.util.Map) threadLocal.get()).put("status", "failure");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int workpackageid;

		public int getWorkpackageid() {
			return this.workpackageid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.workpackageid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.workpackageid != other.workpackageid)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.workpackageid = this.workpackageid;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.workpackageid = this.workpackageid;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

			} finally {
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workpackageid=" + String.valueOf(workpackageid));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.workpackageid, other.workpackageid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];

		public int workpackageid;

		public int getWorkpackageid() {
			return this.workpackageid;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workpackageid=" + String.valueOf(workpackageid));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];

		public int workpackageid;

		public int getWorkpackageid() {
			return this.workpackageid;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workpackageid=" + String.valueOf(workpackageid));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tHash_row5 begin ] start
				 */

				ok_Hash.put("tHash_row5", false);
				start_Hash.put("tHash_row5", System.currentTimeMillis());

				currentComponent = "tHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tHash_row5 = 0;

				java.util.Map<row5Struct, row5Struct> tHash_row5 = new java.util.LinkedHashMap<row5Struct, row5Struct>();
				globalMap.put("tHash_row5", tHash_row5);

				/**
				 * [tHash_row5 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int workpackageid;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.workpackageid;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.workpackageid != other.workpackageid)
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "javier.herrer.torres";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
<<<<<<< HEAD
						"enc:routine.encryption.key.v1:HLVDsvTEjKiH7UHU6fQzHLewwfxX4C00HuJ364OjoORfJpBK");
=======
						"enc:routine.encryption.key.v1:EfmbUaf9rAN+SzAcgGH0plx+ZG5UZRTBF7JP2gYfkVyIGlJb");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AMOS";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "select\n	workPackageID::int\nfrom	\n	WorkPackages";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.workpackageid = 0;
						} else {

							row2.workpackageid = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						row3 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
						ope_tFilterRow_1.matches((row2.workpackageid > 0), "workpackageid>0 failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row3 == null) {
								row3 = new row3Struct();
							}
							row3.workpackageid = row2.workpackageid;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							row5 = null;
							row5 = null;
							finder_tUniqRow_1.workpackageid = row3.workpackageid;
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								new_tUniqRow_1.workpackageid = row3.workpackageid;

								keystUniqRow_1.add(new_tUniqRow_1);
								if (row5 == null) {

									row5 = new row5Struct();
								}
								row5.workpackageid = row3.workpackageid;
								if (row5 == null) {

									row5 = new row5Struct();
								}
								row5.workpackageid = row3.workpackageid;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tHash_row5 main ] start
								 */

								currentComponent = "tHash_row5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row5"

									);
								}

								row5Struct row5_HashRow = new row5Struct();

								row5_HashRow.workpackageid = row5.workpackageid;
								tHash_row5.put(row5_HashRow, row5_HashRow);

								tos_count_tHash_row5++;

								/**
								 * [tHash_row5 main ] stop
								 */

								/**
								 * [tHash_row5 process_data_begin ] start
								 */

								currentComponent = "tHash_row5";

								/**
								 * [tHash_row5 process_data_begin ] stop
								 */

								/**
								 * [tHash_row5 process_data_end ] start
								 */

								currentComponent = "tHash_row5";

								/**
								 * [tHash_row5 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFilterRow_1 process_data_end ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tHash_row5 end ] start
				 */

				currentComponent = "tHash_row5";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tHash_row5", true);
				end_Hash.put("tHash_row5", System.currentTimeMillis());

				/**
				 * [tHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tHash_row5 finally ] start
				 */

				currentComponent = "tHash_row5";

				/**
				 * [tHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public String monthid;

		public String getMonthid() {
			return this.monthid;
		}

		public String personid;

		public String getPersonid() {
			return this.personid;
		}

		public int counter;

		public int getCounter() {
			return this.counter;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());

				result = prime * result + ((this.monthid == null) ? 0 : this.monthid.hashCode());

				result = prime * result + ((this.personid == null) ? 0 : this.personid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.aircraftid == null) {
				if (other.aircraftid != null)
					return false;

			} else if (!this.aircraftid.equals(other.aircraftid))

				return false;

			if (this.monthid == null) {
				if (other.monthid != null)
					return false;

			} else if (!this.monthid.equals(other.monthid))

				return false;

			if (this.personid == null) {
				if (other.personid != null)
					return false;

			} else if (!this.personid.equals(other.personid))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;
			other.counter = this.counter;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

					this.counter = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

					this.counter = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

				// int

				dos.writeInt(this.counter);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

				// int

				dos.writeInt(this.counter);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aircraftid=" + aircraftid);
			sb.append(",monthid=" + monthid);
			sb.append(",personid=" + personid);
			sb.append(",counter=" + String.valueOf(counter));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.aircraftid, other.aircraftid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.monthid, other.monthid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.personid, other.personid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public String monthid;

		public String getMonthid() {
			return this.monthid;
		}

		public String personid;

		public String getPersonid() {
			return this.personid;
		}

		public int counter;

		public int getCounter() {
			return this.counter;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());

				result = prime * result + ((this.monthid == null) ? 0 : this.monthid.hashCode());

				result = prime * result + ((this.personid == null) ? 0 : this.personid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;

			if (this.aircraftid == null) {
				if (other.aircraftid != null)
					return false;

			} else if (!this.aircraftid.equals(other.aircraftid))

				return false;

			if (this.monthid == null) {
				if (other.monthid != null)
					return false;

			} else if (!this.monthid.equals(other.monthid))

				return false;

			if (this.personid == null) {
				if (other.personid != null)
					return false;

			} else if (!this.personid.equals(other.personid))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;
			other.counter = this.counter;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

					this.counter = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

					this.counter = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

				// int

				dos.writeInt(this.counter);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

				// int

				dos.writeInt(this.counter);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aircraftid=" + aircraftid);
			sb.append(",monthid=" + monthid);
			sb.append(",personid=" + personid);
			sb.append(",counter=" + String.valueOf(counter));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.aircraftid, other.aircraftid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.monthid, other.monthid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.personid, other.personid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int workorderid;

		public int getWorkorderid() {
			return this.workorderid;
		}

		public int workpackage;

		public int getWorkpackage() {
			return this.workpackage;
		}

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public String monthid;

		public String getMonthid() {
			return this.monthid;
		}

		public String personid;

		public String getPersonid() {
			return this.personid;
		}

		public int workpackageid;

		public int getWorkpackageid() {
			return this.workpackageid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.workorderid;

				result = prime * result + (int) this.workpackageid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.workorderid != other.workorderid)
				return false;

			if (this.workpackageid != other.workpackageid)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.workorderid = this.workorderid;
			other.workpackage = this.workpackage;
			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;
			other.workpackageid = this.workpackageid;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.workorderid = this.workorderid;
			other.workpackageid = this.workpackageid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workorderid=" + String.valueOf(workorderid));
			sb.append(",workpackage=" + String.valueOf(workpackage));
			sb.append(",aircraftid=" + aircraftid);
			sb.append(",monthid=" + monthid);
			sb.append(",personid=" + personid);
			sb.append(",workpackageid=" + String.valueOf(workpackageid));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.workorderid, other.workorderid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.workpackageid, other.workpackageid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int workorderid;

		public int getWorkorderid() {
			return this.workorderid;
		}

		public int workpackage;

		public int getWorkpackage() {
			return this.workpackage;
		}

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public String monthid;

		public String getMonthid() {
			return this.monthid;
		}

		public String personid;

		public String getPersonid() {
			return this.personid;
		}

		public int workpackageid;

		public int getWorkpackageid() {
			return this.workpackageid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.workorderid;

				result = prime * result + (int) this.workpackageid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.workorderid != other.workorderid)
				return false;

			if (this.workpackageid != other.workpackageid)
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.workorderid = this.workorderid;
			other.workpackage = this.workpackage;
			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;
			other.workpackageid = this.workpackageid;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.workorderid = this.workorderid;
			other.workpackageid = this.workpackageid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

					this.workpackageid = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

				// int

				dos.writeInt(this.workpackageid);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workorderid=" + String.valueOf(workorderid));
			sb.append(",workpackage=" + String.valueOf(workpackage));
			sb.append(",aircraftid=" + aircraftid);
			sb.append(",monthid=" + monthid);
			sb.append(",personid=" + personid);
			sb.append(",workpackageid=" + String.valueOf(workpackageid));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.workorderid, other.workorderid);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.workpackageid, other.workpackageid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int workorderid;

		public int getWorkorderid() {
			return this.workorderid;
		}

		public int workpackage;

		public int getWorkpackage() {
			return this.workpackage;
		}

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public String monthid;

		public String getMonthid() {
			return this.monthid;
		}

		public String personid;

		public String getPersonid() {
			return this.personid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.workorderid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.workorderid != other.workorderid)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.workorderid = this.workorderid;
			other.workpackage = this.workpackage;
			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.workorderid = this.workorderid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workorderid=" + String.valueOf(workorderid));
			sb.append(",workpackage=" + String.valueOf(workpackage));
			sb.append(",aircraftid=" + aircraftid);
			sb.append(",monthid=" + monthid);
			sb.append(",personid=" + personid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.workorderid, other.workorderid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int workorderid;

		public int getWorkorderid() {
			return this.workorderid;
		}

		public int workpackage;

		public int getWorkpackage() {
			return this.workpackage;
		}

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public String monthid;

		public String getMonthid() {
			return this.monthid;
		}

		public String personid;

		public String getPersonid() {
			return this.personid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.workorderid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.workorderid != other.workorderid)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.workorderid = this.workorderid;
			other.workpackage = this.workpackage;
			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.workorderid = this.workorderid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workorderid=" + String.valueOf(workorderid));
			sb.append(",workpackage=" + String.valueOf(workpackage));
			sb.append(",aircraftid=" + aircraftid);
			sb.append(",monthid=" + monthid);
			sb.append(",personid=" + personid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.workorderid, other.workorderid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int workorderid;

		public int getWorkorderid() {
			return this.workorderid;
		}

		public int workpackage;

		public int getWorkpackage() {
			return this.workpackage;
		}

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public String monthid;

		public String getMonthid() {
			return this.monthid;
		}

		public String personid;

		public String getPersonid() {
			return this.personid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.workorderid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.workorderid != other.workorderid)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.workorderid = this.workorderid;
			other.workpackage = this.workpackage;
			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.workorderid = this.workorderid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workorderid=" + String.valueOf(workorderid));
			sb.append(",workpackage=" + String.valueOf(workpackage));
			sb.append(",aircraftid=" + aircraftid);
			sb.append(",monthid=" + monthid);
			sb.append(",personid=" + personid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.workorderid, other.workorderid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
		final static byte[] commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		static byte[] commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int workorderid;

		public int getWorkorderid() {
			return this.workorderid;
		}

		public int workpackage;

		public int getWorkpackage() {
			return this.workpackage;
		}

		public String aircraftid;

		public String getAircraftid() {
			return this.aircraftid;
		}

		public String monthid;

		public String getMonthid() {
			return this.monthid;
		}

		public String personid;

		public String getPersonid() {
			return this.personid;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.workorderid;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_4Struct other = (after_tDBInput_4Struct) obj;

			if (this.workorderid != other.workorderid)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_4Struct other) {

			other.workorderid = this.workorderid;
			other.workpackage = this.workpackage;
			other.aircraftid = this.aircraftid;
			other.monthid = this.monthid;
			other.personid = this.personid;

		}

		public void copyKeysDataTo(after_tDBInput_4Struct other) {

			other.workorderid = this.workorderid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length) {
					if (length < 1024 && commonByteArray_ACMEFLYINGUSECASE_LogBookReporting.length == 0) {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[1024];
					} else {
						commonByteArray_ACMEFLYINGUSECASE_LogBookReporting = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length);
				strReturn = new String(commonByteArray_ACMEFLYINGUSECASE_LogBookReporting, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ACMEFLYINGUSECASE_LogBookReporting) {

				try {

					int length = 0;

					this.workorderid = dis.readInt();

					this.workpackage = dis.readInt();

					this.aircraftid = readString(dis);

					this.monthid = readString(dis);

					this.personid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.workorderid);

				// int

				dos.writeInt(this.workpackage);

				// String

				writeString(this.aircraftid, dos);

				// String

				writeString(this.monthid, dos);

				// String

				writeString(this.personid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("workorderid=" + String.valueOf(workorderid));
			sb.append(",workpackage=" + String.valueOf(workpackage));
			sb.append(",aircraftid=" + aircraftid);
			sb.append(",monthid=" + monthid);
			sb.append(",personid=" + personid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.workorderid, other.workorderid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);

				row4Struct row4 = new row4Struct();
				row7Struct row7 = new row7Struct();
				row1Struct row1 = new row1Struct();
				row6Struct row6 = new row6Struct();
				row8Struct row8 = new row8Struct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String aircraftid;
					String monthid;
					String personid;
					int count = 0;
					int counter_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());

							result = prime * result + ((this.monthid == null) ? 0 : this.monthid.hashCode());

							result = prime * result + ((this.personid == null) ? 0 : this.personid.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.aircraftid == null) {
							if (other.aircraftid != null)
								return false;
						} else if (!this.aircraftid.equals(other.aircraftid))
							return false;

						if (this.monthid == null) {
							if (other.monthid != null)
								return false;
						} else if (!this.monthid.equals(other.monthid))
							return false;

						if (this.personid == null) {
							if (other.personid != null)
								return false;
						} else if (!this.personid.equals(other.personid))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tJoin_1 begin ] start
				 */

				ok_Hash.put("tJoin_1", false);
				start_Hash.put("tJoin_1", System.currentTimeMillis());

				currentComponent = "tJoin_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tJoin_1 = 0;

				final java.util.Map<row5Struct, row5Struct> tHash_tJoin_1 = (java.util.Map<row5Struct, row5Struct>) globalMap
						.get("tHash_row5");

				class Util_tJoin_1 {
					row5Struct lookupValue = null;
					row5Struct row5HashKey = new row5Struct();

					public boolean isJoined(row1Struct mainRow) {
						row5HashKey.workpackageid = mainRow.workpackage;

						row5HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_1.get(row5HashKey);
						if (lookupValue != null) {
							return true;
						} else {
						}
						return false;
					}
				}

				Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();

				int nb_line_tJoin_1 = 0;

				/**
				 * [tJoin_1 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int workorderid;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.workorderid;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.workorderid != other.workorderid)
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "javier.herrer.torres";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
<<<<<<< HEAD
						"enc:routine.encryption.key.v1:Ar6jiNfand8SiK/yJhc/nRV2ibT5HFsK+WHv/oqGLaQd2xP8");
=======
						"enc:routine.encryption.key.v1:2fFAue0xb79k3Bb+ugv1hJuBbWrjPYB0U/9Kse0DJY2Fy67Z");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AMOS";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				conn_tDBInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "select\n	workorderid::int,\n	workpackage::int,\n	aircraftregistration::char(6) as aircraftID,\n	to_char(reportingdate, 'YYY"
						+ "Y-MM')::char(7) as monthID,\n	reporteurID::char(6) as personID\nfrom	\n	TechnicalLogBookOrders";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.workorderid = 0;
						} else {

							row4.workorderid = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.workpackage = 0;
						} else {

							row4.workpackage = rs_tDBInput_4.getInt(2);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.aircraftid = null;
						} else {

							row4.aircraftid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.monthid = null;
						} else {

							row4.monthid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.personid = null;
						} else {

							row4.personid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_2 main ] start
						 */

						currentComponent = "tFilterRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row4"

							);
						}

						row7 = null;
						Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
						ope_tFilterRow_2.matches((row4.workorderid > 0), "workorderid>0 failed");

						if (ope_tFilterRow_2.getMatchFlag()) {
							if (row7 == null) {
								row7 = new row7Struct();
							}
							row7.workorderid = row4.workorderid;
							row7.workpackage = row4.workpackage;
							row7.aircraftid = row4.aircraftid;
							row7.monthid = row4.monthid;
							row7.personid = row4.personid;
							nb_line_ok_tFilterRow_2++;
						} else {
							nb_line_reject_tFilterRow_2++;
						}

						nb_line_tFilterRow_2++;

						tos_count_tFilterRow_2++;

						/**
						 * [tFilterRow_2 main ] stop
						 */

						/**
						 * [tFilterRow_2 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_begin ] stop
						 */
// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row7"

								);
							}

							row1 = null;
							finder_tUniqRow_2.workorderid = row7.workorderid;
							finder_tUniqRow_2.hashCodeDirty = true;
							if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
								KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

								new_tUniqRow_2.workorderid = row7.workorderid;

								keystUniqRow_2.add(new_tUniqRow_2);
								if (row1 == null) {

									row1 = new row1Struct();
								}
								row1.workorderid = row7.workorderid;
								row1.workpackage = row7.workpackage;
								row1.aircraftid = row7.aircraftid;
								row1.monthid = row7.monthid;
								row1.personid = row7.personid;
								nb_uniques_tUniqRow_2++;
							} else {
								nb_duplicates_tUniqRow_2++;
							}

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */

							/**
							 * [tUniqRow_2 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tJoin_1 main ] start
								 */

								currentComponent = "tJoin_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row1"

									);
								}

								row6 = null;
								row9 = null;

								row6 = new row6Struct();
								row6.workorderid = row1.workorderid;
								row6.workpackage = row1.workpackage;
								row6.aircraftid = row1.aircraftid;
								row6.monthid = row1.monthid;
								row6.personid = row1.personid;

								row9 = new row9Struct();
								row9.workorderid = row1.workorderid;
								row9.workpackage = row1.workpackage;
								row9.aircraftid = row1.aircraftid;
								row9.monthid = row1.monthid;
								row9.personid = row1.personid;

								if (util_tJoin_1.isJoined(row1)) {
									row9 = null;
								}

								else {
									row6 = null;
								}
///////////////////////    			

								tos_count_tJoin_1++;

								/**
								 * [tJoin_1 main ] stop
								 */

								/**
								 * [tJoin_1 process_data_begin ] start
								 */

								currentComponent = "tJoin_1";

								/**
								 * [tJoin_1 process_data_begin ] stop
								 */
// Start of branch "row6"
								if (row6 != null) {

									/**
									 * [tAggregateRow_1_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row6"

										);
									}

									operation_finder_tAggregateRow_1.aircraftid = row6.aircraftid;
									operation_finder_tAggregateRow_1.monthid = row6.monthid;
									operation_finder_tAggregateRow_1.personid = row6.personid;

									operation_finder_tAggregateRow_1.hashCodeDirty = true;

									operation_result_tAggregateRow_1 = hash_tAggregateRow_1
											.get(operation_finder_tAggregateRow_1);

									if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

										operation_result_tAggregateRow_1.aircraftid = operation_finder_tAggregateRow_1.aircraftid;
										operation_result_tAggregateRow_1.monthid = operation_finder_tAggregateRow_1.monthid;
										operation_result_tAggregateRow_1.personid = operation_finder_tAggregateRow_1.personid;

										hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
												operation_result_tAggregateRow_1);

									} // G_OutMain_AggR_001

									operation_result_tAggregateRow_1.counter_clmCount++;
									operation_result_tAggregateRow_1.count++;

									tos_count_tAggregateRow_1_AGGOUT++;

									/**
									 * [tAggregateRow_1_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end ] stop
									 */

								} // End of branch "row6"

// Start of branch "row9"
								if (row9 != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row9"

										);
									}

///////////////////////		

									strBuffer_tLogRow_1 = new StringBuilder();

									strBuffer_tLogRow_1.append(String.valueOf(row9.workorderid));

									strBuffer_tLogRow_1.append("|");

									strBuffer_tLogRow_1.append(String.valueOf(row9.workpackage));

									strBuffer_tLogRow_1.append("|");

									if (row9.aircraftid != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row9.aircraftid));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row9.monthid != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row9.monthid));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row9.personid != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row9.personid));

									} //

									strBuffer_tLogRow_1.append("|");

									strBuffer_tLogRow_1.append(String.valueOf(row9.workpackageid));

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_1 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
									}
									consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
									consoleOut_tLogRow_1.flush();
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

								} // End of branch "row9"

								/**
								 * [tJoin_1 process_data_end ] start
								 */

								currentComponent = "tJoin_1";

								/**
								 * [tJoin_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tUniqRow_2 process_data_end ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFilterRow_2 process_data_end ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.commit();

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tJoin_1 end ] start
				 */

				currentComponent = "tJoin_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tJoin_1", true);
				end_Hash.put("tJoin_1", System.currentTimeMillis());

				/**
				 * [tJoin_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 3;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 4 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String url_tDBOutput_1 = null;
				url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "oraclefib.fib.upc.edu" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "orabd"
						+ ")))";
				String dbUser_tDBOutput_1 = "javier.herrer.torres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
<<<<<<< HEAD
						"enc:routine.encryption.key.v1:DG8dY10TcLGDjQi+UGwN1k4DGpksU8yehCH2UeFMYJSJOYJC");
=======
						"enc:routine.encryption.key.v1:0UAH1JWQjBHiKZdQKoaTEDx7CBYGgb/EuvFnF6hTMVdoKDDW");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				dbschema_tDBOutput_1 = "\"JAVIER.HERRER.TORRES\"";

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);
				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("LogBookReporting");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("LogBookReporting");
				}
<<<<<<< HEAD
				String tableNameForSearch_tDBOutput_1 = "" + ((String) "LogBookReporting") + "";
				String dbschemaForSearch_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_1 = ((String) "javier.herrer.torres").toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_1 = dbschema_tDBOutput_1.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				if (tableNameForSearch_tDBOutput_1.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.replaceAll("\"", "");
				}
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null,
						dbschemaForSearch_tDBOutput_1, tableNameForSearch_tDBOutput_1, new String[] { "TABLE" })) {
					if (rsTable_tDBOutput_1.next()) {
						whetherExist_tDBOutput_1 = true;
					}
				}

				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE " + tableName_tDBOutput_1
								+ "(aircraftid CHAR(6)   not null ,monthid CHAR(7)   not null ,personid CHAR(6)   not null ,counter NUMBER(2,0)   not null ,primary key(aircraftid,monthid,personid))");
					}
=======
				try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtDrop_tDBOutput_1.execute("DROP TABLE " + tableName_tDBOutput_1 + "");
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE " + tableName_tDBOutput_1
							+ "(aircraftid CHAR(6)   not null ,monthid CHAR(7)   not null ,personid CHAR(6)   not null ,counter NUMBER(2,0)   not null ,primary key(aircraftid,monthid,personid))");
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM " + tableName_tDBOutput_1
								+ " WHERE trim(aircraftid) = ? AND trim(monthid) = ? AND trim(personid) = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1
						+ " (aircraftid,monthid,personid,counter) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE " + tableName_tDBOutput_1
						+ " SET counter = ? WHERE trim(aircraftid) = ? AND trim(monthid) = ? AND trim(personid) = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row8.aircraftid = aggregated_row_tAggregateRow_1.aircraftid;

					row8.monthid = aggregated_row_tAggregateRow_1.monthid;

					row8.personid = aggregated_row_tAggregateRow_1.personid;
					row8.counter = (int) aggregated_row_tAggregateRow_1.count;
					row8.counter = (int) aggregated_row_tAggregateRow_1.counter_clmCount;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 main ] start
					 */

					currentComponent = "tDBOutput_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row8"

						);
					}

					whetherReject_tDBOutput_1 = false;
					if (row8.aircraftid == null) {
						pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
					} else {
						if (row8.aircraftid == null) {
							pstmt_tDBOutput_1.setNull(1, java.sql.Types.CHAR);
						} else if (row8.aircraftid == " ") {
							pstmt_tDBOutput_1.setString(1, "");
						} else {
							pstmt_tDBOutput_1.setString(1, String.valueOf(row8.aircraftid));
						}
					}

					if (row8.monthid == null) {
						pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
					} else {
						if (row8.monthid == null) {
							pstmt_tDBOutput_1.setNull(2, java.sql.Types.CHAR);
						} else if (row8.monthid == " ") {
							pstmt_tDBOutput_1.setString(2, "");
						} else {
							pstmt_tDBOutput_1.setString(2, String.valueOf(row8.monthid));
						}
					}

					if (row8.personid == null) {
						pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
					} else {
						if (row8.personid == null) {
							pstmt_tDBOutput_1.setNull(3, java.sql.Types.CHAR);
						} else if (row8.personid == " ") {
							pstmt_tDBOutput_1.setString(3, "");
						} else {
							pstmt_tDBOutput_1.setString(3, String.valueOf(row8.personid));
						}
					}

					int checkCount_tDBOutput_1 = -1;
					try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
						while (rs_tDBOutput_1.next()) {
							checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
						}
					}
					if (checkCount_tDBOutput_1 > 0) {
						pstmtUpdate_tDBOutput_1.setInt(1, row8.counter);

						if (row8.aircraftid == null) {
							pstmtUpdate_tDBOutput_1.setNull(2 + count_tDBOutput_1, java.sql.Types.VARCHAR);
						} else {
							if (row8.aircraftid == null) {
								pstmtUpdate_tDBOutput_1.setNull(2 + count_tDBOutput_1, java.sql.Types.CHAR);
							} else if (row8.aircraftid == " ") {
								pstmtUpdate_tDBOutput_1.setString(2 + count_tDBOutput_1, "");
							} else {
								pstmtUpdate_tDBOutput_1.setString(2 + count_tDBOutput_1,
										String.valueOf(row8.aircraftid));
							}
						}

						if (row8.monthid == null) {
							pstmtUpdate_tDBOutput_1.setNull(3 + count_tDBOutput_1, java.sql.Types.VARCHAR);
						} else {
							if (row8.monthid == null) {
								pstmtUpdate_tDBOutput_1.setNull(3 + count_tDBOutput_1, java.sql.Types.CHAR);
							} else if (row8.monthid == " ") {
								pstmtUpdate_tDBOutput_1.setString(3 + count_tDBOutput_1, "");
							} else {
								pstmtUpdate_tDBOutput_1.setString(3 + count_tDBOutput_1, String.valueOf(row8.monthid));
							}
						}

						if (row8.personid == null) {
							pstmtUpdate_tDBOutput_1.setNull(4 + count_tDBOutput_1, java.sql.Types.VARCHAR);
						} else {
							if (row8.personid == null) {
								pstmtUpdate_tDBOutput_1.setNull(4 + count_tDBOutput_1, java.sql.Types.CHAR);
							} else if (row8.personid == " ") {
								pstmtUpdate_tDBOutput_1.setString(4 + count_tDBOutput_1, "");
							} else {
								pstmtUpdate_tDBOutput_1.setString(4 + count_tDBOutput_1, String.valueOf(row8.personid));
							}
						}

						try {
							int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
							updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
							rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
							nb_line_tDBOutput_1++;
						} catch (java.lang.Exception e_tDBOutput_1) {
							globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
							whetherReject_tDBOutput_1 = true;
							nb_line_tDBOutput_1++;
							System.err.print(e_tDBOutput_1.getMessage());
						}
					} else {
						if (row8.aircraftid == null) {
							pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
						} else {
							if (row8.aircraftid == null) {
								pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.CHAR);
							} else if (row8.aircraftid == " ") {
								pstmtInsert_tDBOutput_1.setString(1, "");
							} else {
								pstmtInsert_tDBOutput_1.setString(1, String.valueOf(row8.aircraftid));
							}
						}

						if (row8.monthid == null) {
							pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
						} else {
							if (row8.monthid == null) {
								pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.CHAR);
							} else if (row8.monthid == " ") {
								pstmtInsert_tDBOutput_1.setString(2, "");
							} else {
								pstmtInsert_tDBOutput_1.setString(2, String.valueOf(row8.monthid));
							}
						}

						if (row8.personid == null) {
							pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
						} else {
							if (row8.personid == null) {
								pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.CHAR);
							} else if (row8.personid == " ") {
								pstmtInsert_tDBOutput_1.setString(3, "");
							} else {
								pstmtInsert_tDBOutput_1.setString(3, String.valueOf(row8.personid));
							}
						}

						pstmtInsert_tDBOutput_1.setInt(4, row8.counter);

						try {
							int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
							insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
							rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
							nb_line_tDBOutput_1++;
						} catch (java.lang.Exception e_tDBOutput_1) {
							globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
							whetherReject_tDBOutput_1 = true;
							nb_line_tDBOutput_1++;
							System.err.print(e_tDBOutput_1.getMessage());
						}
					}
					commitCounter_tDBOutput_1++;
					if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
						if (rowsToCommitCount_tDBOutput_1 != 0) {

						}
						conn_tDBOutput_1.commit();
						if (rowsToCommitCount_tDBOutput_1 != 0) {

							rowsToCommitCount_tDBOutput_1 = 0;
						}
						commitCounter_tDBOutput_1 = 0;
					}

					tos_count_tDBOutput_1++;

					/**
					 * [tDBOutput_1 main ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_begin ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tJoin_1"
			globalMap.remove("tHash_row5");

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tJoin_1 finally ] start
				 */

				currentComponent = "tJoin_1";

				/**
				 * [tJoin_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

<<<<<<< HEAD
=======
	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)
	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final LogBookReporting LogBookReportingClass = new LogBookReporting();

		int exitCode = LogBookReportingClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = LogBookReporting.class.getClassLoader().getResourceAsStream(
					"acmeflyingusecase/logbookreporting_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = LogBookReporting.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
<<<<<<< HEAD

		try {
			errorCode = null;
			tDBInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_4) {
			globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

			e_tDBInput_4.printStackTrace();

=======
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBInput_4Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tDBInput_4) {
					globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

					e_tDBInput_4.printStackTrace();

				} catch (java.lang.Error e_tDBInput_4) {
					globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tDBInput_4;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : LogBookReporting");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

<<<<<<< HEAD
=======
		Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
		String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
		if (localErrorCode != null) {
			if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
				errorCode = localErrorCode;
			}
		}
		if (localStatus != null && !status.equals("failure")) {
			status = localStatus;
		}

>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
<<<<<<< HEAD
 * 165239 characters generated by Talend Open Studio for Data Integration on the
 * December 11, 2023, 10:24:09 AM CET
=======
 * 167198 characters generated by Talend Open Studio for Data Integration on the
 * December 11, 2023, 7:12:31 PM CET
>>>>>>> b20ed64 (feat: logbookreporting and aircraftdimension)
 ************************************************************************************************/